Slackware package for Xalan-J java XSLT 1.0 processor.

Package Build Options
=====================

This package is built using the '2jars' version of the Xalan-J
distribution from apache.org. For explanation see:
  http://xml.apache.org/xalan-j/downloads.html
This distribution comes with complete API documentation and an
extensive set of samples.

By default, the build script does not include API documentation or 
samples with the package.  However, you may enable either or both
of those by passing some value other than "no" to APIDOCS and/or
SAMPLES as appropriate.  As an example, the following would cause
both the api docs and the samples to be included in the package:
  SAMPLES=yes APIDOCS=blah ./xalanj.SlackBuild

Setting CLASSPATH
=================

Profile scripts are included with the package, and they should handle
all needed CLASSPATH setting for you.

For more information see:
  http://xml.apache.org/xalan-j/getstarted.html

XSLT Transforms
===============

For full documentation on use see:
  http://xml.apache.org/xalan-j/commandline.html

Xalan-j is a java application and must be invoked using the java syntax:
  java org.apache.xalan.xslt.Process -IN foo.xml -XSL foo.xsl -OUT foo.out

For convenience we have included a shell script /usr/bin/xalanj which
invokes the Xalan-j processor using the same arguments, for example:
  xalanj -IN foo.xml -XSL foo.xsl -OUT foo.out


                      Common Options

-XSLTC (use XSLTC for transformation)
-IN inputXMLURL
-XSL XSLTransformationURL
-OUT outputFileName
-V (Version info)
-EDUMP [optional filename] (Do stackdump on error.)
-XML (Use XML formatter and add XML header.)
-TEXT (Use simple Text formatter.)
-HTML (Use HTML formatter.)
-PARAM name expression (Set a stylesheet parameter)
-MEDIA mediaType (use media attribute to find stylesheet associated with a document)
-FLAVOR flavorName (Explicitly use s2s=SAX or d2d=DOM to do transform)
-DIAG (Print overall milliseconds transform took)
-URIRESOLVER full class name (URIResolver to be used to resolve URIs)
-ENTITYRESOLVER full class name (EntityResolver to be used to resolve entities)
-CONTENTHANDLER full class name (ContentHandler to be used to serialize output)
-SECURE (set the secure processing feature to true)


                      Options for Xalan-Java Interpretive

-QC (Quiet Pattern Conflicts Warnings)
-TT (Trace the templates as they are being called)
-TG (Trace each generation event)
-TS (Trace each selection event)
-TTC (Trace the template children as they are being processed)
-TCLASS (TraceListener class for trace extensions)
-L (use line numbers for source document)
-INCREMENTAL (request incremental DTM construction by setting 
    http://xml.apache.org/xalan/features/incremental to true)
-NOOPTIMIMIZE (request no stylesheet optimization proccessing by setting 
    http://xml.apache.org/xalan/features/optimize to false)
-RL recursionlimit (assert numeric limit on stylesheet recursion depth)

                      Options for Xalan-Java Compiled (XSLTC)

-XO [optional transletName] (assign the name to the generated translet)
-XD destinationDirectory (specify a destination directory for translet)
-XJ jarfile (package translet classes into a jar file of name <jarfile>)
-XP package (specify a package name prefix for all generated translet classes)
-XN (enable XSL template inlining into one big method)
-XX (turn on additional debugging message output)
-XT (use translet to transform if possible)

==============================================================
Written by: Robert Allen, slacker-at-slaphappygeeks.com
